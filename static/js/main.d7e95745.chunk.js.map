{"version":3,"sources":["colors.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS","App","useState","quote","setQuote","author","setAuthor","quotes","setQuotes","rainbow","setRainbow","fetchQuotes","url","a","fetch","response","json","parsedJSON","useEffect","className","id","style","backgroundColor","class","href","encodeURI","icon","faTwitter","onClick","randomInteger","Math","floor","length","random","randomInteger2","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAWyBA,G,MAXV,CAAC,UAAW,UAAW,UAAW,UAAW,UACxD,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,uBC0CjCC,MAzCf,WACE,MAA0BC,mBAAS,iFAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,kBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA8BN,mBAAS,WAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAUS,EAAWV,QAHH,2CAAH,sDAmBjB,OAbAW,qBAAU,WACRP,EAfU,6IA4BV,qBAAKQ,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,0BAASC,GAAG,YAAYC,MAAO,CAACC,gBAAiBb,GAAjD,UACA,mBAAGW,GAAG,OAAN,SAAcjB,IACd,oBAAGiB,GAAG,SAAN,eAAkBf,KAClB,mBAAGkB,MAAM,SAASH,GAAG,cAAcI,KAClCC,UAAU,4CAAD,OAA6CtB,EAA7C,aAAuDE,IADjE,SAEE,cAAC,IAAD,CAAiBqB,KAAMC,QACzB,wBAAQJ,MAAM,SAASH,GAAG,YAAYQ,QAAS,kBAlB9B,WACrB,IAAIC,EAAgBC,KAAKC,MAAMxB,EAAOyB,OAASF,KAAKG,UAChDC,EAAiBJ,KAAKC,MAAM/B,EAAOgC,OAASF,KAAKG,UACrDvB,EAAWV,EAAOkC,IAClB9B,EAASG,EAAOsB,GAAe1B,OAC/BG,EAAUC,EAAOsB,GAAexB,QAayB8B,IAArD,+BChCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7e95745.chunk.js","sourcesContent":["const COLORS = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\n          export default COLORS","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport COLORS from \"./colors\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\n\n\nlet quoteDB = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nfunction App() {\n  const [quote, setQuote] = useState(\"You block your dream when you allow your fear to grow bigger than your faith.\");\n  const [author, setAuthor] = useState(\"Mary Morrissey\");\n  const [quotes, setQuotes] = useState(null);\n  const [rainbow, setRainbow] = useState('#4D80CC')\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotes(parsedJSON.quotes)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quoteDB)\n  }, )\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotes.length * Math.random())\n    let randomInteger2 = Math.floor(COLORS.length * Math.random())\n    setRainbow(COLORS[randomInteger2])\n    setQuote(quotes[randomInteger].quote)\n    setAuthor(quotes[randomInteger].author)\n};\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <wrapper id=\"quote-box\" style={{backgroundColor: rainbow}}>\n        <p id=\"text\">{quote}</p>\n        <p id=\"author\">- {author}</p>\n        <a class=\"button\" id=\"tweet-quote\" href=\n        {encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)\n        }><FontAwesomeIcon icon={faTwitter}/></a>\n        <button class=\"button\" id=\"new-quote\" onClick={() => getRandomQuote()}>New Quote</button>\n        </wrapper>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}